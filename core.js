// Generated by CoffeeScript 2.5.1
(function() {
  // Unknown Pleasures

  // IE unsupported
  var AUDIO_FILE, GRADIENT, ROWS, container, dancer, data, delta, doTransform, getData, initData, isDrag, j, k, line, loaded, maxTransform, move, noise, origin, pulsar, pulse, ref, settings, spectrum, transform, x, y;

  if (navigator.userAgent.match('MSIE')) {
    d3.select('h1').html('Unsupported');
  }

  container = d3.select('#pulsar');

  ROWS = 76;

  GRADIENT = [0, 0, 0, 0, 0.16, 0.28, 0.4, 0.66, 1, 1, 0.92, 0.86, 0.92, 1, 1, 0.66, 0.4, 0.28, 0.16, 0, 0, 0, 0];

  noise = function() {
    return Math.random() * 0.06;
  };

  initData = function(ROWS) {
    var data, j, l, ref, ref1, x, y;
    data = [];
    for (y = j = 0, ref = ROWS - 1; (0 <= ref ? j <= ref : j >= ref); y = 0 <= ref ? ++j : --j) {
      data.push([]);
      for (x = l = 0, ref1 = GRADIENT.length - 1; (0 <= ref1 ? l <= ref1 : l >= ref1); x = 0 <= ref1 ? ++l : --l) {
        data[y].push(noise());
      }
    }
    return data;
  };

  getData = function() {
    var data, j, r, ref, step, val;
    data = [];
    for (r = j = 0, ref = GRADIENT.length - 1; (0 <= ref ? j <= ref : j >= ref); r = 0 <= ref ? ++j : --j) {
      if (spectrum !== void 0) {
        step = Math.floor((spectrum.length / GRADIENT.length) / 2);
        if (spectrum[r * step] !== void 0) {
          val = spectrum[10 + r * step] * 500;
          if (val > 1) {
            val = 1 - Math.random() * 0.4;
          }
          val *= GRADIENT[r];
        } else {
          val = 0;
        }
      }
      if (val < 0.01) {
        val = noise();
      }
      data.push(val);
    }
    return data;
  };

  data = initData(ROWS);

  //------------------------------
  // d3
  //------------------------------
  settings = {
    amplitude: 50,
    update: 80,
    width: 600,
    height: 700,
    padding: [5, 5, 5, 5]
  };

  container.style('width', settings.width + 'px').style('height', settings.height + 'px');

  x = d3.scale.linear().domain([0, data[0].length - 1]).range([settings.padding[3], settings.width - settings.padding[1]]);

  y = d3.scale.linear().domain([0, 1]).range([settings.amplitude - settings.padding[2], settings.padding[0]]);

  line = d3.svg.line().interpolate('cardinal').tension(0.8).x(function(d, i) {
    return x(i);
  }).y(function(d) {
    return y(d);
  });

  pulsar = [];

  for (k = j = 0, ref = data.length - 1; (0 <= ref ? j <= ref : j >= ref); k = 0 <= ref ? ++j : --j) {
    pulsar[k] = container.append('svg:svg').attr('width', settings.width).attr('height', settings.amplitude).style('top', (k / (data.length - 1)) * (settings.height - settings.amplitude) + 'px').append('svg:g');
    pulsar[k].selectAll('path').data([data[k]]).enter().append('svg:path').attr('d', (function() {
      return line(data[k]);
    })());
  }

  setInterval(function() {
    move();
  }, settings.update);

  move = function() {
    var l, q, ref1;
    data.shift();
    data.push(getData());
    for (q = l = 0, ref1 = data.length - 1; (0 <= ref1 ? l <= ref1 : l >= ref1); q = 0 <= ref1 ? ++l : --l) {
      pulsar[q].selectAll('path').data([data[q]]).attr('d', (function() {
        return line(data[q]);
      })());
    }
  };

  window.onresize = function() {
    var mid;
    mid = window.innerHeight / 2 - settings.height / 2 - settings.amplitude * 0.2;
    if (mid < 0) {
      mid = 0;
    }
    container.style('top', mid + 'px');
    return d3.select('h1').style('top', mid + 'px');
  };

  window.onresize();

  //------------------------------
  // Mouse drag
  //------------------------------
  isDrag = false;

  origin = [];

  delta = [];

  transform = [0, 0];

  maxTransform = [60, 85];

  pulse = container.selectAll('svg');

  doTransform = function(tx) {
    var popup;
    container.style('-moz-transform', 'rotateY( ' + tx[0] + 'deg) rotateX( ' + -tx[1] + 'deg)');
    container.style('-webkit-transform', 'rotateY( ' + tx[0] + 'deg) rotateX( ' + -tx[1] + 'deg)');
    container.style('transform', 'rotateY( ' + tx[0] + 'deg) rotateX( ' + -tx[1] + 'deg)');
    popup = Math.sqrt(tx[0] * tx[0] * 0.2 + tx[1] * tx[1]);
    popup = popup > maxTransform[1] ? maxTransform[1] : popup;
    pulse.style('-moz-transform', 'rotateX( ' + -popup + 'deg)');
    pulse.style('-webkit-transform', 'rotateX( ' + -popup + 'deg)');
    return pulse.style('transform', 'rotateX( ' + -popup + 'deg)');
  };

  doTransform(transform); // init

  window.onmousedown = window.touchstart = function(e) {
    isDrag = true;
    origin[0] = e.pageX;
    origin[1] = e.pageY;
  };

  window.onmousemove = window.touchmove = function(e) {
    if (isDrag) {
      delta[0] = (e.pageX - origin[0]) / 2;
      delta[1] = (e.pageY - origin[1]) / 2;
      origin[0] = e.pageX;
      origin[1] = e.pageY;
      transform[0] += delta[0];
      transform[1] += delta[1];
      transform[0] = transform[0] > maxTransform[0] ? maxTransform[0] : transform[0];
      transform[0] = transform[0] < -maxTransform[0] ? -maxTransform[0] : transform[0];
      transform[1] = transform[1] > 0 ? 0 : transform[1];
      transform[1] = transform[1] < -maxTransform[1] ? -maxTransform[1] : transform[1];
      doTransform([transform[0], transform[1]]);
    }
  };

  window.onmouseup = window.touchend = function() {
    isDrag = false;
  };

  //------------------------------
  // dancer.js
  //------------------------------
  AUDIO_FILE = "audio/Disorder.mp3";

  spectrum = [];

  Dancer.addPlugin('fft', function() {
    return this.bind('update', function() {
      return spectrum = this.getSpectrum();
    });
  });

  Dancer.setOptions({
    flashJS: './lib/soundmanager2.js'
  });

  dancer = new Dancer();

  dancer.fft();

  window.addEventListener('keydown', (function(e) {
    if (e.keyCode === 32) {
      if (!dancer.isLoaded()) {
        dancer.load({
          src: AUDIO_FILE
        });
        dancer.bind('loaded', loaded);
      }
      if (dancer.isPlaying()) {
        dancer.pause();
      } else {
        dancer.play();
      }
    }
    if (e.keyCode === 77) {
      if (!dancer.isLoaded()) {
        dancer.load({
          microphone: true
        });
        dancer.bind('loaded', loaded);
      }
      if (dancer.isPlaying()) {
        return dancer.pause();
      } else {
        return dancer.play();
      }
    }
  }).bind(this));

  loaded = function() {
    return d3.selectAll('h2').style('display', 'none');
  };

  return;

}).call(this);
